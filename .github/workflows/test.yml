name: Teste da Prova de Programação

on:
  push:
    branches: [ "master" ]
  # 1. MUDANÇA PRINCIPAL: Usamos pull_request_target para PRs,
  # garantindo o acesso aos secrets do repositório base.
  pull_request_target:
    types: [opened, synchronize, reopened]
    branches: [ "master" ]

jobs:
  relatorio-completo:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: cadastro
          MYSQL_USER: admin
          MYSQL_PASSWORD: ifsp@1234
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -uadmin -pifsp@1234"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      # 2. MUDANÇA NO CHECKOUT: Usamos um checkout seguro em dois passos.
      
      # Passo 2a: Checkout do seu repositório (BASE) - Essencial para que o workflow rode
      - name: Checkout Base Repository
        uses: actions/checkout@v4
        with:
          # Faz o checkout da branch master do seu repo.
          ref: ${{ github.event.repository.default_branch }}

      # Passo 2b: Fetch e Checkout SEGURO do código do aluno (HEAD)
      # Este passo substitui o código da sua branch pelo código do Pull Request.
      - name: Fetch and Checkout Student Code (HEAD of PR)
        if: github.event_name == 'pull_request_target'
        run: |
          echo "Fetching code from fork: ${{ github.event.pull_request.head.repo.clone_url }}"
          git fetch ${{ github.event.pull_request.head.repo.clone_url }} ${{ github.event.pull_request.head.ref }}
          git checkout -B ${{ github.event.pull_request.head.ref }} FETCH_HEAD
          echo "Student code is now active."

      - name: Instalar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Instalar dependências
        run: npm install

      - name: Aguardar MySQL subir
        run: |
          echo "Esperando MySQL..."
          for i in {30..0}; do
            if mysqladmin ping -h"127.0.0.1" -uroot -proot --silent; then
              echo "MySQL está rodando!"
              break
            fi
            echo "Aguardando MySQL... ($i segundos restantes)"
            sleep 2
          done
      
      # O restante do pipeline permanece o mesmo, mas agora
      # a etapa Gemini terá acesso ao secret.
      
      - name: Criar arquivo de relatório com cabeçalho
        run: |
          # Garante que o username só seja tentado se for um PR
          if [ "${{ github.event_name }}" == "pull_request_target" ]; then
              STUDENT_LOGIN="${{ github.event.pull_request.user.login }}"
              STUDENT_ID="${{ github.event.pull_request.user.id }}"
              STUDENT_EMAIL="${STUDENT_ID}+${STUDENT_LOGIN}@users.noreply.github.com"
          else
              STUDENT_LOGIN="${{ github.actor }}"
              STUDENT_EMAIL="${{ github.actor }}@users.noreply.github.com"
          fi
          
          echo "# Relatório de Análise Automatizada" > relatorio-final.md
          echo "" >> relatorio-final.md
          echo "### 👤 Informações do Aluno" >> relatorio-final.md
          echo "* **Username:** \`$STUDENT_LOGIN\`" >> relatorio-final.md
          echo "* **E-mail (No-Reply):** \`$STUDENT_EMAIL\`" >> relatorio-final.md
          echo "---" >> relatorio-final.md

      - name: Criar usuário e esquema inicial
        run: |
          mysql -h 127.0.0.1 -uroot -proot cadastro < scripts/init.sql

      - name: Diagnosticar conexão com o usuário admin
        run: |
          mysql -h 127.0.0.1 -uadmin -pifsp@1234 -e "SHOW DATABASES;"

      - name: Rodar testes e adicionar ao relatório
        run: |
          echo "## 🧪 Resultado dos Testes Unitários" >> relatorio-final.md
          npm test -- --colors=false 2>&1 | tee -a >> relatorio-final.md
        env:
          DB_HOST: 127.0.0.1
          DB_USER: admin
          DB_PASSWORD: ifsp@1234
          DB_NAME: cadastro

      - name: Rodar ESLint e adicionar ao relatório
        if: always()
        run: |
          echo "## 🧹 Análise de Estilo do Código (ESLint)" >> relatorio-final.md
          npx eslint src/**/*.js 2>&1 | tee -a >> relatorio-final.md

      - name: Análise de Código com IA (Gemini)
        # Este passo agora funcionará porque o workflow roda com acesso total aos Secrets
        run: |
          echo "## 🧠 Análise de Código com Gemini" >> relatorio-final.md
          node scripts/ai_review.js >> relatorio-final.md 
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}

      - name: Consolidar relatório da IA
        run: |
          cat reports/ai-code-review.md >> relatorio-final.md

      - name: Uploadar Relatório Final
        uses: actions/upload-artifact@v4
        with:
          # É bom diferenciar o nome do artefato por aluno, se possível
          name: Relatorio-Completo-${{ github.event.pull_request.user.login || github.actor }}
          path: relatorio-final.md